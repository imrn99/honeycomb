searchState.loadedDescShard("honeycomb_core", 0, "honeycomb-core\nattribute modeling code\ncombinatorial maps implementations\ngeometry representation types &amp; operators\nCustom storage structure\nGeneric attribute trait\nAttribute operation error enum\nGeneric attribute storage trait\nGeneric attribute trait\n<code>OrbitPolicy</code> determining the kind of topological entity to …\nUse in your custom <code>AttributeUpdate::merge</code>, …\nUse in your custom <code>AttributeUpdate::split</code>, …\nIdentifier type of the entity the attribute is bound to.\nDefault return for fallback functions of <code>AttributeUpdate</code>.\nStorage type used for the attribute.\nGeneric attribute storage trait\nReturns a boxed object from a boxed trait object if the …\nReturns a mutable reference to the object within the trait …\nReturns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the …\nReturns a reference to the object within the trait object …\nExtend the storage’s length\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the trait object wraps an object of type …\nMerging routine, i.e. how to obtain a new value from two …\nMerge attributes to specified index\nFallback merging routine, i.e. how to obtain a new value …\nFallback merging routine, i.e. how to obtain a new value …\nFallback merging routine, i.e. how to obtain a new value …\nFallback merging routine, i.e. how to obtain a new value …\nReturn the number of stored attributes, i.e. the number of …\nConstructor\nRead the value of an element at a given index.\nRemove the value at a given index and return it.\nSplitting routine, i.e. how to obtain the two new values …\nSplit attribute to specified indices\nFallback splitting routine, i.e. how to obtain two new …\nFallback splitting routine, i.e. how to obtain two new …\nWrite the value of an element at a given index and return …\nThe dart is already free.\nThe two orbits being linked have different structures.\nGeometry predicate failed verification.\nThe meta section of the file is incorrect.\nA value could not be parsed.\nSpecified VTK file contains inconsistent data.\nBuilder-level error enum\n2D combinatorial map implementation\nMain map object.\nCombinatorial map builder structure\nOrdered array of beta functions defining the orbit.\nDart ID representation type\nThe file contains a duplicated section.\n1-cell orbit.\nEdge ID representation type\n2-cell orbit.\nFace ID representation type\n2-cell orbit, without using beta 0. Incorrect if the cell …\nAttribute operation failed.\nDart link failed.\nGrid description used by the map builder\nThe file contains contradicting data.\nOne or multiple of the specified grid characteristics are …\nLink operation error enum\nThe builder is missing one or multiple parameters to …\nA required section is missing from the file.\nNull dart ID value\nNull edge ID value\nNull face ID value\nNull vertex ID value\nNull volume ID value\nThe base dart is not free.\nThe image dart is not free\nOrbit search policy enum\nSew operation error enum\nThe file contains an unrecognized section header.\nSpecified VTK file contains unsupported data.\n0-cell orbit.\nVertex ID representation type\n0-cell orbit, without using beta 0. Incorrect if the cell …\n3-cell orbit.\nVolume ID representation type\n3-cell orbit, without using beta 0. Incorrect if the cell …\nAdd the attribute <code>A</code> to the attributes the created map will …\nAdd a new free dart to the map.\nAdd a new free dart to the map.\nAdd <code>n_darts</code> new free darts to the map.\nAdd <code>n_darts</code> new free darts to the map.\nReturn  β<code>I</code>(<code>dart_id</code>).\nReturn β<code>I</code>(<code>dart_id</code>).\nReturn  β<code>i</code>(<code>dart_id</code>).\nReturn β<code>i</code>(<code>dart_id</code>).\nReturn  β<code>i</code>(<code>dart_id</code>).\nReturn β<code>i</code>(<code>dart_id</code>).\nReturn  β<code>I</code>(<code>dart_id</code>).\nReturn β<code>I</code>(<code>dart_id</code>).\nConsumes the builder and produce a combinatorial map …\nCompute the ID of the edge a given dart is part of.\nCompute the ID of the edge a given dart is part of.\nCompute the ID of the edge a given dart is part of.\nCompute the ID of the edge a given dart is part of.\nCompute the ID of the face a given dart is part of.\nCompute the ID of the face a given dart is part of.\nCompute the ID of the face a given dart is part of.\nCompute the ID of the face a given dart is part of.\n<code>I</code>-link operator.\n<code>I</code>-link operator.\nReturn the attribute <code>A</code> value associated to a given …\nReturn the attribute <code>A</code> value associated to a given …\nRead the vertex associated to a given identifier.\nRead the vertex associated to a given identifier.\nRemove the attribute <code>A</code> value associated to a given …\nRemove the attribute <code>A</code> value associated to a given …\nRemove the vertex associated to a given identifier and …\nRemove the vertex associated to a given identifier and …\n<code>I</code>-sew operator.\n<code>I</code>-sew operator.\n<code>I</code>-unlink operator.\n<code>I</code>-unlink operator.\n<code>I</code>-unsew operator.\n<code>I</code>-unsew operator.\nReplace the attribute <code>A</code> value associated to a given …\nReplace the attribute <code>A</code> value associated to a given …\nReplace the vertex associated to a given identifier and …\nWrite a vertex to a given identifier, and return its old …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a builder structure from a <code>cmap</code> file.\nCreate a builder structure from a <code>GridDescriptor</code>.\nCreate a builder structure for a map with a set number of …\nCreate a builder structure from a VTK file.\nCreate a <code>CMapBuilder</code> with a predefinite <code>GridDescriptor</code> …\nReturn the orbit defined by a dart and its <code>I</code>-cell.\nReturn the orbit defined by a dart and its <code>I</code>-cell.\nInsert a new free dart in the map.\nInsert a new free dart into the map.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if a given dart is <code>i</code>-free, for all <code>i</code>.\nCheck if a given dart is free for all <code>i</code>.\nCheck if a given dart is <code>I</code>-free.\nCheck if a given dart is <code>I</code>-free.\nReturn whether a given dart is unused or not.\nReturn whether a given dart is unused or not.\nReturn an iterator over IDs of all the map’s edges.\nReturn an iterator over IDs of all the map’s edges.\nReturn an iterator over IDs of all the map’s faces.\nReturn an iterator over IDs of all the map’s faces.\nReturn an iterator over IDs of all the map’s vertices.\nReturn an iterator over IDs of all the map’s vertices.\nReturn an iterator over IDs of all the map’s volumes.\nSet values for all dimensions\nSet values for all dimensions\n<code>I</code>-link operator.\n<code>I</code>-link operator.\nSet values for all dimensions\nReturn the current number of darts.\nReturn the current number of darts.\nReturn the current number of unused darts.\nReturn the current number of unused darts.\nReturn the current number of vertices.\nReturn the current number of vertices.\nGeneric orbit implementation.\nGeneric orbit implementation.\nGeneric orbit transactional implementation.\nGeneric orbit transactional implementation.\nSet origin (most bottom-left vertex) of the grid\nReturn the attribute <code>A</code> value associated to a given …\nReturn the attribute <code>A</code> value associated to a given …\nReturn the vertex associated to a given identifier.\nReturn the vertex associated to a given identifier.\nRemove the attribute <code>A</code> value associated to a given …\nRemove the attribute <code>A</code> value associated to a given …\nRemove the attribute <code>A</code>’s storage from the map.\nRemove the attribute <code>A</code>’s storage from the map.\nRemove a free dart from the map.\nRemove a free dart from the map.\nRemove the vertex associated to a given identifier and …\nRemove the vertex associated to a given identifier and …\nSerialize the map under a custom format.\nSerialize the map under a custom format.\nSet the value of β<code>I</code>(<code>dart_id</code>) to <code>new_val</code>.\nSet the value of the specified beta function of a dart.\nSet the values of the beta functions of a dart.\nSet the values of the beta functions of a dart.\n<code>I</code>-sew operator.\n<code>I</code>-sew operator.\nIndicate whether to split quads of the grid\n<strong>UNIMPLEMENTED</strong>\nGenerate a legacy VTK file from the map.\nGenerate a legacy VTK file from the map.\nCreate a <code>CMapBuilder</code> with a predefinite <code>GridDescriptor</code> …\nCreate a <code>CMapBuilder</code> with a predefinite <code>GridDescriptor</code> …\n<code>I</code>-unlink operator.\n<code>I</code>-unlink operator.\n<code>I</code>-unsew operator.\n<code>I</code>-unsew operator.\nCompute the ID of the vertex a given dart is part of.\nCompute the ID of the vertex a given dart is part of.\nCompute the ID of the vertex a given dart is part of.\nCompute the ID of the vertex a given dart is part of, …\nCompute the ID of the volume a given dart is part of.\nCompute the ID of the volume a given dart is part of.\nReplace the attribute <code>A</code> value associated to a given …\nReplace the attribute <code>A</code> value associated to a given …\nReplace the vertex associated to a given identifier and …\nReplace the vertex associated to a given identifier and …\nCoordinates-level error enum\nGeneric FP type trait\nError returned when trying to compute the normal to a null …\nError returned when trying to compute the unit vector of a …\n2D vector structure\n3D vector structure\n2D vertex structure\n2D vertex structure\nCompute the mid-point between two vertices.\nCompute the mid-point between two vertices.\nReturn the cross product between <code>self</code> and <code>other</code>.\nReturn the dot product between <code>self</code> and <code>other</code>.\nReturn the dot product between <code>self</code> and <code>other</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume <code>self</code> to return inner values.\nConsume <code>self</code> to return inner values.\nConsume <code>self</code> to return inner values.\nConsume <code>self</code> to return inner values.\nCompute the norm of <code>self</code>.\nCompute the norm of <code>self</code>.\nCompute the direction of the normal vector to <code>self</code> as a …\nCompute the direction of <code>self</code> as a unit vector.\nCompute the direction of <code>self</code> as a unit vector.\nReturn a unit vector along the <code>x</code> axis.\nReturn a unit vector along the <code>x</code> axis.\nReturn a unit vector along the <code>y</code> axis.\nReturn a unit vector along the <code>y</code> axis.\nReturn a unit vector along the <code>z</code> axis.\nReturn the value of the <code>x</code> coordinate of the vector.\nReturn the value of the <code>x</code> coordinate of the vertex.\nReturn the value of the <code>x</code> coordinate of the vector.\nReturn the value of the <code>x</code> coordinate of the vertex.\nReturn the value of the <code>y</code> coordinate of the vector.\nReturn the value of the <code>y</code> coordinate of the vertex.\nReturn the value of the <code>y</code> coordinate of the vector.\nReturn the value of the <code>y</code> coordinate of the ver, Otex.\nReturn the value of the <code>z</code> coordinate of the vector.\nReturn the value of the <code>z</code> coordinate of the vertex.")